#ifdef __cplusplus
#define UIKIT_EXTERN		extern "C" __attribute__((visibility ("default")))
#else
#define UIKIT_EXTERN	        extern __attribute__((visibility ("default")))
#endif

#define UIKIT_STATIC_INLINE	static inline

UIApplication
		typedef NS_ENUM(NSUInteger, UIBackgroundFetchResult) {
		    UIBackgroundFetchResultNewData,
		    UIBackgroundFetchResultNoData,
		    UIBackgroundFetchResultFailed
		} NS_ENUM_AVAILABLE_IOS(7_0);

		typedef NS_ENUM(NSInteger, UIBackgroundRefreshStatus) {
		    UIBackgroundRefreshStatusRestricted, //< unavailable on this system due to device configuration; the user cannot enable the feature
		    UIBackgroundRefreshStatusDenied,     //< explicitly disabled by the user for this application
		    UIBackgroundRefreshStatusAvailable   //< enabled for this application
		} NS_ENUM_AVAILABLE_IOS(7_0);
    
		typedef NS_ENUM(NSInteger, UIApplicationState) {
		    UIApplicationStateActive,
		    UIApplicationStateInactive,
		    UIApplicationStateBackground
		} NS_ENUM_AVAILABLE_IOS(4_0);

		typedef NS_ENUM(NSInteger, UIUserInterfaceLayoutDirection) {
		    UIUserInterfaceLayoutDirectionLeftToRight,
		    UIUserInterfaceLayoutDirectionRightToLeft,
		} NS_ENUM_AVAILABLE_IOS(5_0);

		typedef NS_ENUM(NSInteger, UIStatusBarStyle) {
		    UIStatusBarStyleDefault                                     = 0, // Dark content, for use on light backgrounds
		    UIStatusBarStyleLightContent     NS_ENUM_AVAILABLE_IOS(7_0) = 1, // Light content, for use on dark backgrounds
    
		    UIStatusBarStyleBlackTranslucent NS_ENUM_DEPRECATED_IOS(2_0, 7_0, "Use UIStatusBarStyleLightContent") = 1,
		    UIStatusBarStyleBlackOpaque      NS_ENUM_DEPRECATED_IOS(2_0, 7_0, "Use UIStatusBarStyleLightContent") = 2,
		};

		typedef NS_ENUM(NSInteger, UIStatusBarAnimation) {
		    UIStatusBarAnimationNone,
		#if __IPHONE_3_2 <= __IPHONE_OS_VERSION_MAX_ALLOWED
		    UIStatusBarAnimationFade,
		    UIStatusBarAnimationSlide,
		#endif
		};
		
		// Note that UIInterfaceOrientationLandscapeLeft is equal to UIDeviceOrientationLandscapeRight (and vice versa).
		// This is because rotating the device to the left requires rotating the content to the right.
		typedef NS_ENUM(NSInteger, UIInterfaceOrientation) {
		    UIInterfaceOrientationUnknown            = UIDeviceOrientationUnknown,
		    UIInterfaceOrientationPortrait           = UIDeviceOrientationPortrait,
		    UIInterfaceOrientationPortraitUpsideDown = UIDeviceOrientationPortraitUpsideDown,
		    UIInterfaceOrientationLandscapeLeft      = UIDeviceOrientationLandscapeRight,
		    UIInterfaceOrientationLandscapeRight     = UIDeviceOrientationLandscapeLeft
		};
		
		/* This exception is raised if supportedInterfaceOrientations returns 0, or if preferredInterfaceOrientationForPresentation
		   returns an orientation that is not supported.
		*/
		UIKIT_EXTERN NSString *const UIApplicationInvalidInterfaceOrientationException NS_AVAILABLE_IOS(6_0);
		
		typedef NS_OPTIONS(NSUInteger, UIInterfaceOrientationMask) {
		    UIInterfaceOrientationMaskPortrait = (1 << UIInterfaceOrientationPortrait),
		    UIInterfaceOrientationMaskLandscapeLeft = (1 << UIInterfaceOrientationLandscapeLeft),
		    UIInterfaceOrientationMaskLandscapeRight = (1 << UIInterfaceOrientationLandscapeRight),
		    UIInterfaceOrientationMaskPortraitUpsideDown = (1 << UIInterfaceOrientationPortraitUpsideDown),
		    UIInterfaceOrientationMaskLandscape = (UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight),
		    UIInterfaceOrientationMaskAll = (UIInterfaceOrientationMaskPortrait | UIInterfaceOrientationMaskLandscapeLeft | UIInterfaceOrientationMaskLandscapeRight 
																				| UIInterfaceOrientationMaskPortraitUpsideDown),
		    UIInterfaceOrientationMaskAllButUpsideDown = (UIInterfaceOrientationMaskPortrait | UIInterfaceOrientationMaskLandscapeLeft | 
																							UIInterfaceOrientationMaskLandscapeRight),
		};
		
		
		#define UIDeviceOrientationIsValidInterfaceOrientation(orientation) ((UIDeviceOrientation)(orientation) == UIDeviceOrientationPortrait || 
				(UIDeviceOrientation)(orientation) == UIDeviceOrientationPortraitUpsideDown || (UIDeviceOrientation)(orientation) == 
				UIDeviceOrientationLandscapeLeft || (UIDeviceOrientation)(orientation) == UIDeviceOrientationLandscapeRight)
		
		@property(nonatomic,getter=isIdleTimerDisabled)       BOOL idleTimerDisabled;	  // default is NO
		
		- (BOOL)openURL:(NSURL*)url NS_EXTENSION_UNAVAILABLE_IOS("");
		- (BOOL)canOpenURL:(NSURL *)url NS_AVAILABLE_IOS(3_0);
		- (void)sendEvent:(UIEvent *)event;

		@property(nonatomic,readonly) UIWindow *keyWindow;
		@property(nonatomic,readonly) NSArray  *windows;
				
@property(nonatomic,getter=isNetworkActivityIndicatorVisible) BOOL networkActivityIndicatorVisible; // showing network spinning gear in status bar. default is NO

UIActivityViewController
	
		typedef void (^UIActivityViewControllerCompletionHandler)(NSString *activityType, BOOL completed);
		typedef void (^UIActivityViewControllerCompletionWithItemsHandler)(NSString *activityType, BOOL completed, NSArray *returnedItems, NSError *activityError);

		- (instancetype)initWithActivityItems:(NSArray *)activityItems applicationActivities:(NSArray *)applicationActivities;

		@property(nonatomic,copy) UIActivityViewControllerCompletionHandler completionHandler NS_DEPRECATED_IOS(6_0, 8_0, "Use completionWithItemsHandler instead."); 
		 // set to nil after call
		@property(nonatomic,copy) UIActivityViewControllerCompletionWithItemsHandler completionWithItemsHandler NS_AVAILABLE_IOS(8_0); // set to nil after call

		@property(nonatomic,copy) NSArray *excludedActivityTypes; // default is nil. activity types listed will not be displayed


UIActivity
		UIKIT_EXTERN NSString *const UIActivityTypePostToFacebook     NS_AVAILABLE_IOS(6_0);
		UIKIT_EXTERN NSString *const UIActivityTypePostToTwitter      NS_AVAILABLE_IOS(6_0);
		UIKIT_EXTERN NSString *const UIActivityTypePostToWeibo        NS_AVAILABLE_IOS(6_0);    // SinaWeibo
		UIKIT_EXTERN NSString *const UIActivityTypeMessage            NS_AVAILABLE_IOS(6_0);
		UIKIT_EXTERN NSString *const UIActivityTypeMail               NS_AVAILABLE_IOS(6_0);
		UIKIT_EXTERN NSString *const UIActivityTypePrint              NS_AVAILABLE_IOS(6_0);
		UIKIT_EXTERN NSString *const UIActivityTypeCopyToPasteboard   NS_AVAILABLE_IOS(6_0);
		UIKIT_EXTERN NSString *const UIActivityTypeAssignToContact    NS_AVAILABLE_IOS(6_0);
		UIKIT_EXTERN NSString *const UIActivityTypeSaveToCameraRoll   NS_AVAILABLE_IOS(6_0);
		UIKIT_EXTERN NSString *const UIActivityTypeAddToReadingList   NS_AVAILABLE_IOS(7_0);
		UIKIT_EXTERN NSString *const UIActivityTypePostToFlickr       NS_AVAILABLE_IOS(7_0);
		UIKIT_EXTERN NSString *const UIActivityTypePostToVimeo        NS_AVAILABLE_IOS(7_0);
		UIKIT_EXTERN NSString *const UIActivityTypePostToTencentWeibo NS_AVAILABLE_IOS(7_0);
		UIKIT_EXTERN NSString *const UIActivityTypeAirDrop            NS_AVAILABLE_IOS(7_0);

		typedef NS_ENUM(NSInteger, UIActivityCategory) {
		    UIActivityCategoryAction,
		    UIActivityCategoryShare,
		} NS_ENUM_AVAILABLE_IOS(7_0);

		NS_CLASS_AVAILABLE_IOS(6_0) @interface UIActivity : NSObject

		// override methods

		+ (UIActivityCategory)activityCategory NS_AVAILABLE_IOS(7_0); // default is UIActivityCategoryAction.

		- (NSString *)activityType;       // default returns nil. subclass may override to return custom activity type that is reported to completion handler
		- (NSString *)activityTitle;      // default returns nil. subclass must override and must return non-nil value
		- (UIImage *)activityImage;       // default returns nil. subclass must override and must return non-nil value

		- (BOOL)canPerformWithActivityItems:(NSArray *)activityItems;   // override this to return availability of activity based on items. default returns NO
		- (void)prepareWithActivityItems:(NSArray *)activityItems;      // override to extract items and set up your HI. default does nothing

		- (UIViewController *)activityViewController;   // return non-nil to have vC presented modally. call activityDidFinish at end. default returns nil
		- (void)performActivity;                        // if no view controller, this method is called. call activityDidFinish when done. default calls [self 
														activityDidFinish:NO]

		// state method

		- (void)activityDidFinish:(BOOL)completed;   // activity must call this when activity is finished. can be called on any thread

	
UIAlertController

						typedef NS_ENUM(NSInteger, UIAlertActionStyle) {
						    UIAlertActionStyleDefault = 0,
						    UIAlertActionStyleCancel,
						    UIAlertActionStyleDestructive
						} NS_ENUM_AVAILABLE_IOS(8_0);

						typedef NS_ENUM(NSInteger, UIAlertControllerStyle) {
						    UIAlertControllerStyleActionSheet = 0,
						    UIAlertControllerStyleAlert
						} NS_ENUM_AVAILABLE_IOS(8_0);
	
		UIAlertAction
	
					@property (nonatomic, readonly) NSString *title;
					@property (nonatomic, readonly) UIAlertActionStyle style;
					@property (nonatomic, getter=isEnabled) BOOL enabled;
	
					+ (instancetype)actionWithTitle:(NSString *)title style:(UIAlertActionStyle)style handler:(void (^)(UIAlertAction *action))handler;
	
	
	@property (nonatomic, readonly) NSArray *textFields;

	@property (nonatomic, copy) NSString *title;
	@property (nonatomic, copy) NSString *message;

	@property (nonatomic, readonly) UIAlertControllerStyle preferredStyle;
	
	@property (nonatomic, readonly) NSArray *actions;
	
	- (void)addTextFieldWithConfigurationHandler:(void (^)(UITextField *textField))configurationHandler;
	+ (instancetype)alertControllerWithTitle:(NSString *)title message:(NSString *)message preferredStyle:(UIAlertControllerStyle)preferredStyle;
	- (void)addAction:(UIAlertAction *)action;
	




UIAppearance

					/* 
						To customize the appearance of all instances of a class, send the relevant appearance modification messages to the appearance proxy for the 
						class. For example, to modify the bar tint color for all UINavigationBar instances:
					    		[[UINavigationBar appearance] setBarTintColor:myColor];
					    Note for iOS7: On iOS7 the tintColor property has moved to UIView, and now has special inherited behavior described in UIView.h.
					    This inherited behavior can conflict with the appearance proxy, and therefore tintColor is now disallowed with the appearance proxy.
					 */

		+ (instancetype)appearance;

					/* 
						To customize the appearances for instances of a class contained within an instance of a container class, or instances in a hierarchy, use 
						+appearanceWhenContainedIn: for the appropriate appearance proxy. For example:
 
						 	[[UINavigationBar appearanceWhenContainedIn:[UISplitViewController class], nil] setBarTintColor:myColor];
							[[UINavigationBar appearanceWhenContainedIn:[UITabBarController class], [UISplitViewController class], nil] 
							setBarTintColor:myTabbedNavBarColor];
 
						In any given view hierarchy the outermost appearance proxy wins. Specificity (depth of the chain) is the tie-breaker.
					 	In other words, the containment statement is treated as a partial ordering. Given a concrete ordering (actual subview hierarchy), we select 
						the partial ordering that is the first unique match when reading the actual hierarchy from the window down.

						 This method will throw an exception for anything in the var-args list that is not a Class <UIAppearanceContainer>.
					*/

		+ (instancetype)appearanceWhenContainedIn:(Class <UIAppearanceContainer>)ContainerClass, ... NS_REQUIRES_NIL_TERMINATION;

		+ (instancetype)appearanceForTraitCollection:(UITraitCollection *)trait NS_AVAILABLE_IOS(8_0);
		+ (instancetype)appearanceForTraitCollection:(UITraitCollection *)trait whenContainedIn:(Class <UIAppearanceContainer>)ContainerClass, ... 
		NS_REQUIRES_NIL_TERMINATION NS_AVAILABLE_IOS(8_0);





UIAlertView/UIActionSheet
		