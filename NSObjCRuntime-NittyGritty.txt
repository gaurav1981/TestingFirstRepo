NSObjCRuntime

	#if defined(__cplusplus)
	#define FOUNDATION_EXTERN extern "C"
	#else
	#define FOUNDATION_EXTERN extern
	#endif


    #define FOUNDATION_EXPORT FOUNDATION_EXTERN
    #define FOUNDATION_IMPORT FOUNDATION_EXTERN
	
	#if !defined(NS_INLINE)
	    #if defined(__GNUC__)
	        #define NS_INLINE static __inline__ __attribute__((always_inline))
	    #elif defined(__MWERKS__) || defined(__cplusplus)
	        #define NS_INLINE static inline
	    #elif defined(_MSC_VER)
	        #define NS_INLINE static __inline
	    #elif TARGET_OS_WIN32
	        #define NS_INLINE static __inline__
	    #endif
	#endif

	#if !defined(FOUNDATION_STATIC_INLINE)
	#define FOUNDATION_STATIC_INLINE static __inline__
	#endif

	#if !defined(FOUNDATION_EXTERN_INLINE)
	#define FOUNDATION_EXTERN_INLINE extern __inline__
	#endif
	
	
	#if !defined(NS_REQUIRES_NIL_TERMINATION)
	    #if TARGET_OS_WIN32
	        #define NS_REQUIRES_NIL_TERMINATION
	    #else
	        #if defined(__APPLE_CC__) && (__APPLE_CC__ >= 5549)
	            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel(0,1)))
	        #else
	            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel))
	        #endif
	    #endif
	#endif

	#if !defined(NS_BLOCKS_AVAILABLE)
	    #if __BLOCKS__ && (MAC_OS_X_VERSION_10_6 <= MAC_OS_X_VERSION_MAX_ALLOWED || __IPHONE_4_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED)
	        #define NS_BLOCKS_AVAILABLE 1
	    #else
	        #define NS_BLOCKS_AVAILABLE 0
	    #endif
	#endif
	


// Marks APIs whose iOS versions are nonatomic, that is cannot be set/get from multiple threads safely without additional synchronization
		#if !defined(NS_NONATOMIC_IOSONLY)
		    #if TARGET_OS_IPHONE
			#define NS_NONATOMIC_IOSONLY nonatomic
		    #else
		        #if __has_feature(objc_property_explicit_atomic)
		            #define NS_NONATOMIC_IOSONLY atomic
		        #else
		            #define NS_NONATOMIC_IOSONLY
		        #endif
		    #endif
		#endif



		// Use NS_NONATOMIC_IOSONLY instead of this older macro
		#if !defined(NS_NONATOMIC_IPHONEONLY)
		#define NS_NONATOMIC_IPHONEONLY NS_NONATOMIC_IOSONLY
		#endif

		// Marks APIs which format strings by taking a format string and optional varargs as arguments
		#if !defined(NS_FORMAT_FUNCTION)
		    #if (__GNUC__*10+__GNUC_MINOR__ >= 42) && (TARGET_OS_MAC || TARGET_OS_EMBEDDED)
			#define NS_FORMAT_FUNCTION(F,A) __attribute__((format(__NSString__, F, A)))
		    #else
			#define NS_FORMAT_FUNCTION(F,A)
		    #endif
		#endif

		// Marks APIs which are often used to process (take and return) format strings, so they can be used in place of a constant format string parameter in APIs
		#if !defined(NS_FORMAT_ARGUMENT)
		    #if defined(__clang__)
			#define NS_FORMAT_ARGUMENT(A) __attribute__ ((format_arg(A)))
		    #else
			#define NS_FORMAT_ARGUMENT(A)
		    #endif
		#endif


		// Some compilers provide the capability to test if certain features are available. This macro provides a compatibility path for other compilers.
		#ifndef __has_feature
		#define __has_feature(x) 0
		#endif

		#ifndef __has_extension
		#define __has_extension(x) 0
		#endif

		// Some compilers provide the capability to test if certain attributes are available. This macro provides a compatibility path for other compilers.
		#ifndef __has_attribute
		#define __has_attribute(x) 0
		#endif


		// Marks classes that must specify @dynamic or @synthesize for properties in their @implementation (property getters & setters will not be synthesized unless the @synthesize directive is used)
		#if __has_attribute(objc_requires_property_definitions)
		#define NS_REQUIRES_PROPERTY_DEFINITIONS __attribute__((objc_requires_property_definitions)) 
		#else
		#define NS_REQUIRES_PROPERTY_DEFINITIONS
		#endif

		// Decorates methods in which the receiver may be replaced with the result of the method. 
		#if __has_feature(attribute_ns_consumes_self)
		#define NS_REPLACES_RECEIVER __attribute__((ns_consumes_self)) NS_RETURNS_RETAINED
		#else
		#define NS_REPLACES_RECEIVER
		#endif


		// Mark local variables of type 'id' or pointer-to-ObjC-object-type so that values stored into that local variable are not aggressively released by the compiler during optimization, but are held until either the variable is assigned to again, or the end of the scope (such as a compound statement, or method definition) of the local variable.
		#ifndef NS_VALID_UNTIL_END_OF_SCOPE
		#if __has_attribute(objc_precise_lifetime)
		#define NS_VALID_UNTIL_END_OF_SCOPE __attribute__((objc_precise_lifetime))
		#else
		#define NS_VALID_UNTIL_END_OF_SCOPE
		#endif
		#endif

		// Annotate classes which are root classes as really being root classes
		#ifndef NS_ROOT_CLASS
		#if __has_attribute(objc_root_class)
		#define NS_ROOT_CLASS __attribute__((objc_root_class))
		#else
		#define NS_ROOT_CLASS
		#endif
		#endif

		#ifndef NS_REQUIRES_SUPER
		#if __has_attribute(objc_requires_super)
		#define NS_REQUIRES_SUPER __attribute__((objc_requires_super))
		#else
		#define NS_REQUIRES_SUPER
		#endif
		#endif

		#ifndef NS_DESIGNATED_INITIALIZER
		#if __has_attribute(objc_designated_initializer)
		#define NS_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
		#else
		#define NS_DESIGNATED_INITIALIZER
		#endif
		#endif

		#ifndef NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
		#if __has_attribute(objc_protocol_requires_explicit_implementation)
		#define NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION __attribute__((objc_protocol_requires_explicit_implementation))
		#else
		#define NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
		#endif
		#endif

		#if !__has_feature(objc_instancetype)
		#undef instancetype
		#define instancetype id
		#endif

		#if !defined(NS_UNAVAILABLE)
		#define NS_UNAVAILABLE UNAVAILABLE_ATTRIBUTE
		#endif

		#if !defined(__unsafe_unretained)
		#define __unsafe_unretained
		#endif


		#define NS_AVAILABLE(_mac, _ios) CF_AVAILABLE(_mac, _ios)
		#define NS_AVAILABLE_MAC(_mac) CF_AVAILABLE_MAC(_mac)
		#define NS_AVAILABLE_IOS(_ios) CF_AVAILABLE_IOS(_ios)


		#define NS_ENUM_AVAILABLE(_mac, _ios) CF_ENUM_AVAILABLE(_mac, _ios)
		#define NS_ENUM_AVAILABLE_MAC(_mac) CF_ENUM_AVAILABLE_MAC(_mac)
		#define NS_ENUM_AVAILABLE_IOS(_ios) CF_ENUM_AVAILABLE_IOS(_ios)


		#define NS_ENUM(...) CF_ENUM(__VA_ARGS__)
		#define NS_OPTIONS(_type, _name) CF_OPTIONS(_type, _name)

		// This macro is to be used by system frameworks to support the weak linking of classes. Weak linking is supported on iOS 3.1 and Mac OS X 10.6.8 or later.
		#if (__MAC_OS_X_VERSION_MIN_REQUIRED >= __MAC_10_6 || __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_3_1) && \
		    ((__has_feature(objc_weak_class) || \
		     (defined(__llvm__) && defined(__APPLE_CC__) && (__APPLE_CC__ >= 5658)) || \
		     (defined(__APPLE_CC__) && (__APPLE_CC__ >= 5666))))
		#define NS_CLASS_AVAILABLE(_mac, _ios) __attribute__((visibility("default"))) NS_AVAILABLE(_mac, _ios)
		#define NS_CLASS_DEPRECATED(_mac, _macDep, _ios, _iosDep, ...) __attribute__((visibility("default"))) NS_DEPRECATED(_mac, _macDep, _ios, _iosDep, __VA_ARGS__)
		#else
		// class weak import is not supported
		#define NS_CLASS_AVAILABLE(_mac, _ios)
		#define NS_CLASS_DEPRECATED(_mac, _macDep, _ios, _iosDep, ...)
		#endif

		#define NS_CLASS_AVAILABLE_IOS(_ios) NS_CLASS_AVAILABLE(NA, _ios)
		#define NS_CLASS_AVAILABLE_MAC(_mac) NS_CLASS_AVAILABLE(_mac, NA)
		#define NS_CLASS_DEPRECATED_MAC(_macIntro, _macDep, ...) NS_CLASS_DEPRECATED(_macIntro, _macDep, NA, NA, __VA_ARGS__)
		#define NS_CLASS_DEPRECATED_IOS(_iosIntro, _iosDep, ...) NS_CLASS_DEPRECATED(NA, NA, _iosIntro, _iosDep, __VA_ARGS__)

		#define NS_EXTENSION_UNAVAILABLE(_msg)      __OS_EXTENSION_UNAVAILABLE(_msg)
		#define NS_EXTENSION_UNAVAILABLE_MAC(_msg)  __OSX_EXTENSION_UNAVAILABLE(_msg)
		#define NS_EXTENSION_UNAVAILABLE_IOS(_msg)  __IOS_EXTENSION_UNAVAILABLE(_msg)

		#define NS_SWIFT_UNAVAILABLE(_msg) CF_SWIFT_UNAVAILABLE(_msg)

		#define NS_ASSUME_NONNULL_BEGIN _Pragma("clang assume_nonnull begin")
		#define NS_ASSUME_NONNULL_END   _Pragma("clang assume_nonnull end")

		#define NS_REFINED_FOR_SWIFT CF_REFINED_FOR_SWIFT

		#define NS_SWIFT_NAME(_name) CF_SWIFT_NAME(_name)

		#if __has_attribute(swift_error)
		#define NS_SWIFT_NOTHROW __attribute__((swift_error(none)))
		#else
		#define NS_SWIFT_NOTHROW
		#endif


		#define NSFoundationVersionNumber_iPhoneOS_2_0	678.24
		#define NSFoundationVersionNumber_iPhoneOS_2_1  678.26
		#define NSFoundationVersionNumber_iPhoneOS_2_2  678.29
		#define NSFoundationVersionNumber_iPhoneOS_3_0  678.47
		#define NSFoundationVersionNumber_iPhoneOS_3_1  678.51
		#define NSFoundationVersionNumber_iPhoneOS_3_2  678.60
		#define NSFoundationVersionNumber_iOS_4_0  751.32
		#define NSFoundationVersionNumber_iOS_4_1  751.37
		#define NSFoundationVersionNumber_iOS_4_2  751.49
		#define NSFoundationVersionNumber_iOS_4_3  751.49
		#define NSFoundationVersionNumber_iOS_5_0  881.00
		#define NSFoundationVersionNumber_iOS_5_1  890.10
		#define NSFoundationVersionNumber_iOS_6_0  992.00
		#define NSFoundationVersionNumber_iOS_6_1  993.00
		#define NSFoundationVersionNumber_iOS_7_0 1047.20
		#define NSFoundationVersionNumber_iOS_7_1 1047.25
		#define NSFoundationVersionNumber_iOS_8_0 1140.11
		#define NSFoundationVersionNumber_iOS_8_1 1141.1
		#define NSFoundationVersionNumber_iOS_8_2 1142.14
		#define NSFoundationVersionNumber_iOS_8_3 1144.17


		FOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);
		FOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);

		FOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);
		FOUNDATION_EXPORT Class __nullable NSClassFromString(NSString *aClassName);

		FOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) NS_AVAILABLE(10_5, 2_0);
		FOUNDATION_EXPORT Protocol * __nullable NSProtocolFromString(NSString *namestr) NS_AVAILABLE(10_5, 2_0);

		FOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * __nullable sizep, NSUInteger * __nullable alignp);

		FOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2);
		FOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0);

		typedef NS_ENUM(NSInteger, NSComparisonResult) {NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending};

		#if NS_BLOCKS_AVAILABLE
		typedef NSComparisonResult (^NSComparator)(id obj1, id obj2);
		#endif

		typedef NS_OPTIONS(NSUInteger, NSEnumerationOptions) {
		    NSEnumerationConcurrent = (1UL << 0),
		    NSEnumerationReverse = (1UL << 1),
		};

		typedef NS_OPTIONS(NSUInteger, NSSortOptions) {
		    NSSortConcurrent = (1UL << 0),
		    NSSortStable = (1UL << 4),
		};


		/* The following Quality of Service (QoS) classifications are used to indicate to the system the nature and importance of work.  They are used by the system to manage a variety of resources.  Higher QoS classes receive more resources than lower ones during resource contention. */
		typedef NS_ENUM(NSInteger, NSQualityOfService) {
		    /* UserInteractive QoS is used for work directly involved in providing an interactive UI such as processing events or drawing to the screen. */
		    NSQualityOfServiceUserInteractive = 0x21,
    
		    /* UserInitiated QoS is used for performing work that has been explicitly requested by the user and for which results must be immediately presented in order to allow for further user interaction.  For example, loading an email after a user has selected it in a message list. */
		    NSQualityOfServiceUserInitiated = 0x19,
    
		    /* Utility QoS is used for performing work which the user is unlikely to be immediately waiting for the results.  This work may have been requested by the user or initiated automatically, does not prevent the user from further interaction, often operates at user-visible timescales and may have its progress indicated to the user by a non-modal progress indicator.  This work will run in an energy-efficient manner, in deference to higher QoS work when resources are constrained.  For example, periodic content updates or bulk file operations such as media import. */
		    NSQualityOfServiceUtility = 0x11,
    
		    /* Background QoS is used for work that is not user initiated or visible.  In general, a user is unaware that this work is even happening and it will run in the most efficient manner while giving the most deference to higher QoS work.  For example, pre-fetching content, search indexing, backups, and syncing of data with external systems. */
		    NSQualityOfServiceBackground = 0x09,

		    /* Default QoS indicates the absence of QoS information.  Whenever possible QoS information will be inferred from other sources.  If such inference is not possible, a QoS between UserInitiated and Utility will be used. */
		    NSQualityOfServiceDefault = -1
		} NS_ENUM_AVAILABLE(10_10, 8_0);

		static const NSInteger NSNotFound = NSIntegerMax;


		#if !defined(YES)
		    #define YES	(BOOL)1
		#endif

		#if !defined(NO)
		    #define NO	(BOOL)0
		#endif


		#if !defined(MIN)
		    #define MIN(A,B)	({ __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a < __b ? __a : __b; })
		#endif

		#if !defined(MAX)
		    #define MAX(A,B)	({ __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a < __b ? __b : __a; })
		#endif

		#if !defined(ABS)
		    #define ABS(A)	({ __typeof__(A) __a = (A); __a < 0 ? -__a : __a; })
		#endif
